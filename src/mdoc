#!/bin/env bash

set -e

MDOC_DATADIR=${MDOC_DATADIR:-@CMAKE_INSTALL_FULL_DATADIR@/mdoc}
MDOC_VERSION="@PROJECT_VERSION@"
MDOC_FILTERS="@MDOC_FILTERS@"

if [ -n "$MDOC_DEBUG" ]; then
	set -x
fi

log() {
	echo >&2 "mdoc: $*"
}

mdoc_rerun_in_container() {
	MDOC_CONTAINER_ENGINE=podman
	if ! command -v "$MDOC_CONTAINER_ENGINE" &>/dev/null; then
		MDOC_CONTAINER_ENGINE=docker
	fi
	if ! command -v "$MDOC_CONTAINER_ENGINE" &>/dev/null; then
		log "Error: Container engine (podman or docker) not found"
		exit 1
	fi

	log "Running mdoc in container using $MDOC_CONTAINER_ENGINE"

	log "Checking if container image is available" &&
		if ! $MDOC_CONTAINER_ENGINE image list | grep blackdesk/doc -q; then
			log "Downloading container image" &&
				$MDOC_CONTAINER_ENGINE pull docker.io/blackdesk/doc
		fi

	script="cd /workspace &&"
	script+=" TZ=$(timedatectl show --property=Timezone --value)"
	script+=" LANGUAGE=${LANGUAGE} LC_ALL=${LC_ALL} LANG=${LANG}"
	script+=" MDOC_DATADIR=/app/share/mdoc"
	script+=" /app/bin/mdoc $*"

	exec $MDOC_CONTAINER_ENGINE run --rm -it \
		-v "$(pwd)":/workspace \
		--mount type=bind,src="${BASH_SOURCE[0]}",target=/app/bin/mdoc \
		docker.io/blackdesk/doc \
		bash --login -c \
		"${script}"
}

if [ -n "$MDOC_USE_CONTAINER" ]; then
	mdoc_rerun_in_container "$@"
fi

mdoc_is_installed() {
	if ! command -v pandoc &>/dev/null; then
		log "Warning: pandoc not found"
		return 1
	fi

	if ! command -v typst &>/dev/null; then
		log "Warning: typst not found"
		return 1
	fi

	IFS=';' read -ra FILTER <<<"$MDOC_FILTERS"
	for f in "${FILTER[@]}"; do
		if [ ! -f "$MDOC_DATADIR/filters/$f" ]; then
			log "Warning: Filter $f not found"
			return 1
		fi
	done

	if [ ! -d "$MDOC_DATADIR"/templates ]; then
		log "Warning: Templates not found"
		return 1
	fi
}

if ! mdoc_is_installed; then
	log "Warning: Broken installation detected, trying to run in container..."
	mdoc_rerun_in_container "$@"
fi

log "Version: $MDOC_VERSION"

MDOC_SYNAX=markdown+east_asian_line_breaks
MDOC_INPUT="$1"
if [ -z "$MDOC_INPUT" ]; then
	MDOC_INPUT=index.md
fi

MDOC_OUTPUT="$2"
if [ -z "$MDOC_OUTPUT" ]; then
	MDOC_OUTPUT=$(
		grep \# -m 1 "$MDOC_INPUT" |
			awk '{$1 = ""; print substr($0, 2)}'
	)
fi

log "Input file is $MDOC_INPUT"
log "Output file is $MDOC_OUTPUT"

IFS=';' read -ra FILTER <<<"$MDOC_FILTERS"
for f in "${FILTER[@]}"; do
	MDOC_PANDOC_FILTER_ARGS+=" --lua-filter $MDOC_DATADIR/filters/$f"
done

MDOC_PANDOC_METADATA_FILE="${MDOC_INPUT%".md"}.meta.yaml"
if [ ! -f "$MDOC_PANDOC_METADATA_FILE" ]; then
	MDOC_PANDOC_METADATA_FILE=/dev/null
fi

if [ ! -f .gitignore ]; then
	log "Generating .gitignore..."
	cat >.gitignore <<EOF
/media/
/${MDOC_INPUT%".md"}.typ
/${MDOC_OUTPUT}.pdf
EOF
fi

log "Running pandoc..."

pandoc \
	"$MDOC_INPUT" \
	-o "${MDOC_INPUT%".md"}.typ" \
	--columns=80 \
	--metadata-file="$MDOC_PANDOC_METADATA_FILE" \
	-M date="$(date)" \
	--from $MDOC_SYNAX \
	--template="$MDOC_DATADIR"/templates/default.typst \
	--extract-media=media \
	--shift-heading-level-by=-1 \
	$MDOC_PANDOC_FILTER_ARGS

log "Running typst..."

typst compile "${MDOC_INPUT%".md"}.typ" "${MDOC_OUTPUT}".pdf

(command -v xdg-open &>/dev/null && xdg-open "${MDOC_OUTPUT}".pdf) || true
